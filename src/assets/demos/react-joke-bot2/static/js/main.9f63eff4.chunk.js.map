{"version":3,"sources":["components/ChatHeader.js","components/ChatMessage.js","components/ChatMessageList.js","components/ChatNewMessage.js","components/ChatBox.js","components/ModalOverlay.js","App.js","index.js"],"names":["ChatHeader","props","className","onClick","onMinimize","ChatMessage","time","getHours","getMinutes","slice","authorClass","author","useState","isTyping","setIsTyping","useEffect","setTimeout","onFinishTyping","content","ChatMessageList","scrollToBottom","messagesEndRef","current","scrollIntoView","behavior","useRef","messages","map","message","index","ref","USER_PHRASES","getJoke","positiveReply","negativeReply","BOT_PHRASES","askForNextJoke","jokeStatus","userHappy","allowClick","ChatNewMessage","getRandomPhrases","arr","n","oneArray","length","result","i","phrasesArray","x","Math","floor","random","phrase","includes","push","defaultOptions","buttonOneText","setButtonOneValue","buttonTwoText","setButtonTwoValue","classHideButtons","setClassHideButtons","sendMessage","id","Date","onAddMessage","toggleAllowClick","buttonClickHandler","e","newButtonPhrases","target","dataset","emotion","innerText","console","log","getBotResponse","finishBot","botReply","fetch","method","then","response","json","data","type","setup","delivery","joke","catch","error","data-emotion","DEFAULT_MESSAGES","ChatBox","setMessages","toggleVisibility","onToggleChatVisibility","isChatExpanded","prevMessages","ModalOverlay","classModalOverlay","onClickOverlay","App","setIsChatExpanded","toggleChatVisibility","body","document","getElementsByTagName","classList","remove","add","href","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9f63eff4.chunk.js","sourcesContent":["import \"./ChatHeader.css\";\r\n\r\nconst ChatHeader = (props) => {\r\n  return (\r\n    <div className=\"chat-box__header chat-header\">\r\n      <div className=\"chat-header__bot-image\">\r\n        <i className=\"fas fa-robot\"></i>\r\n      </div>\r\n      <h2 className=\"chat-header__bot-name\">React Chat Bot</h2>\r\n      <div className=\"chat-header__minimize\" onClick={props.onMinimize}>\r\n        <div className=\"minimize\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatHeader;\r\n","import \"./ChatMessage.css\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nconst ChatMessage = (props) => {\r\n  const time = `${props.time.getHours()}:${(\r\n    \"0\" + props.time.getMinutes()\r\n  ).slice(-2)}`;\r\n\r\n  const authorClass =\r\n    props.author === \"bot\" ? \"chat-message--bot\" : \"chat-message--user\";\r\n\r\n  const [isTyping, setIsTyping] = useState(props.author === \"bot\" ? true : \"\");\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setIsTyping(false);\r\n      props.onFinishTyping()\r\n    }, 1000);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className={`chat-message ${authorClass} ${\r\n        isTyping ? \"chat-message--typing\" : \"\"\r\n      }`}\r\n    >\r\n      <div className=\"chat-message__bubble\">\r\n        <span className=\"chat-message__content\">{props.content}</span>\r\n        <span className=\"chat-message__time\">{time}</span>\r\n\r\n        {props.author === \"bot\" && (\r\n          <div className=\"chat-message__dots\">\r\n            <div className=\"dot\"></div>\r\n            <div className=\"dot\"></div>\r\n            <div className=\"dot\"></div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatMessage;\r\n","import \"./ChatMessageList.css\";\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport ChatMessage from \"./ChatMessage\";\r\n\r\nconst ChatMessageList = (props) => {\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n  }\r\n\r\n  const messagesEndRef = useRef(null)\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  });\r\n\r\n  return (\r\n    <div className=\"chat-box__list chat-message-list\">\r\n      {props.messages.map((message, index) => (\r\n        <ChatMessage\r\n          key={index}\r\n          author={message.author}\r\n          content={message.content}\r\n          time={message.time}\r\n          onFinishTyping={scrollToBottom}\r\n        />\r\n      ))}\r\n      <div className=\"chat-message-list__bottom-div\" ref={messagesEndRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatMessageList;\r\n","import { getRoles } from \"@testing-library/dom\";\r\nimport { useState } from \"react\";\r\nimport \"./ChatNewMessage.css\";\r\n\r\nconst USER_PHRASES = {\r\n  getJoke: [\r\n    \"Yep, new joke please\",\r\n    \"Let's do it\",\r\n    \"Ok\",\r\n    \"Alright then\",\r\n    \"Uhu\",\r\n    \"Why not\",\r\n    \"Well, maybe one more\",\r\n    \"Absolutely!\",\r\n    \"We'll see\",\r\n    \"Sure! :)\",\r\n    \"Yup\",\r\n    \"Give me a good one\",\r\n    \"Better than last time please\",\r\n    \"Yup, make me laugh\",\r\n    \"Better than last time please\",\r\n    \"Only if you can deliver a good one\",\r\n  ],\r\n  positiveReply: [\r\n    \"Haha!\",\r\n    \"Lol!\",\r\n    \"I didn't see that one coming..!\",\r\n    \"😂\",\r\n    \"🤣\",\r\n    \"👍\",\r\n    \"👏👏👏\",\r\n    \":-P\",\r\n    \"You're hilarious!\",\r\n    \"Prety good\",\r\n    \"Nice one\",\r\n    \":-P\",\r\n    \"Standing ovation\",\r\n    \"Brilliant\",\r\n  ],\r\n  negativeReply: [\r\n    \"I don't get it\",\r\n    \"😒\",\r\n    \"¯_(ツ)_/¯\",\r\n    \"🤦‍♂️\",\r\n    \"🤦‍♂🤷‍♀️\",\r\n    \"You call that funny?\",\r\n    \"Hmm, no.\",\r\n    \"Wait, what..?\",\r\n    \"Nope, not funny\",\r\n    \"That didn't do it for me, sorry\",\r\n    \"Not trying to be rude here, but do you call that a joke?\",\r\n    \"My grandma is funnier than you\",\r\n    \"Nice try, maybe you'll get me next time\",\r\n  ],\r\n};\r\n\r\nconst BOT_PHRASES = {\r\n  positiveReply: [\r\n    \"Sweet, I'm glad you liked it\",\r\n    \"You're welcome!\",\r\n    \"Nice :)\",\r\n    \"😎\",\r\n    \"😜\",\r\n    \"Woohoo!\",\r\n    \"That's a winner, noted\",\r\n    \"I knew I still had it in me\",\r\n    \"I think I'm on a roll\",\r\n    \"Yup, it's my day today\",\r\n    \"I love putting on a good show\",\r\n    \"This crowd is awesome!\",\r\n    \"Haha\",\r\n    \"(☞ﾟヮﾟ)☞)\",\r\n    \"(¬‿¬)\",\r\n    \"(❁´◡`❁)\",\r\n    \"(●'◡'●)\",\r\n  ],\r\n  negativeReply: [\r\n    \"Winners never quit and quiters never win\",\r\n    \"Hmm, I am just a bot after all\",\r\n    \"I promised I'm not configured by a German\",\r\n    \"Sorry...\",\r\n    \"I'll try harder next time\",\r\n    \"Too bad\",\r\n    \"Tough crowd\",\r\n    \"😢\",\r\n    \"༼ つ ◕_◕ ༽つ\",\r\n    \"🤔\",\r\n    \"ಥ_ಥ\",\r\n    \"Yeah, I knew that one wasn't my best\",\r\n    \"Maybe it's not my day\",\r\n    \"You win some, you lose some\",\r\n    \"Hang on, rebooting my creativity module\",\r\n    \"Did you get it? Oh wel... 😒\",\r\n    \"...\",\r\n    \"(T_T)\",\r\n    \"^_^\",\r\n    \"(•_•)\",\r\n    \"ಠ_ಠ\",\r\n    \"(┬┬﹏┬┬)\",\r\n  ],\r\n  askForNextJoke: [\r\n    \"Would you like to try another one?\",\r\n    \"Encore?\",\r\n    \"How about another one?\",\r\n    \"There's plenty more where that came from\",\r\n    \"Let me have another crack\",\r\n    \"This next one might be right up your alley\",\r\n    \"I already have the next one lined up. Wanna hear?\",\r\n    \"You're not gonna wanna miss this next one. Ready?\",\r\n  ],\r\n};\r\n\r\nlet jokeStatus = false; // whether getting joke or getting reaction\r\nlet userHappy = true; // latest user response: positive of negative\r\nlet allowClick = true; // false when bot talking\r\n\r\nconst ChatNewMessage = (props) => {\r\n  // returns array of phrases\r\n  const getRandomPhrases = (arr, n = null) => {\r\n    let oneArray = true;\r\n    if (!n) {\r\n      n = arr.length;\r\n      oneArray = false;\r\n    }\r\n    let result = [];\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      const phrasesArray = oneArray ? arr[0] : arr[i];\r\n\r\n      while (result.length - 1 < i) {\r\n        const x = Math.floor(Math.random() * phrasesArray.length);\r\n        const phrase = phrasesArray[x];\r\n        if (!result.includes(phrase)) result.push(phrase);\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // const [chatStatus, setChatStatus] = useState(props.chatStatus);\r\n\r\n  const defaultOptions = getRandomPhrases([USER_PHRASES.getJoke], 2);\r\n  const [buttonOneText, setButtonOneValue] = useState(defaultOptions[0]);\r\n  const [buttonTwoText, setButtonTwoValue] = useState(defaultOptions[1]);\r\n  const [classHideButtons, setClassHideButtons] = useState(\"chat-new-message--hide-buttons\");\r\n  // let [jokeStatus, setJokeStatus] = useState(true);\r\n\r\n  const sendMessage = (author, content) => {\r\n    const message = {\r\n      id: Math.random(),\r\n      author: author,\r\n      content: content,\r\n      time: new Date(),\r\n    };\r\n    props.onAddMessage(message);\r\n  };\r\n\r\n  const changeJokeStatus = () => {\r\n    jokeStatus = !jokeStatus;\r\n  };\r\n\r\n  const toggleAllowClick = () => {\r\n    allowClick = !allowClick;\r\n    setClassHideButtons((allowClick)?\"\":\"chat-new-message--hide-buttons\")\r\n  };\r\n\r\n\r\n  const buttonClickHandler = (e) => {\r\n    if (!allowClick) return; // wait for bot to finish\r\n    userHappy = e.target.dataset.emotion === \"positive\";\r\n    toggleAllowClick();\r\n\r\n    sendMessage(\"user\", e.target.innerText);\r\n    if (jokeStatus) {\r\n    }\r\n    console.log(e.target.dataset.emotion)\r\n    console.log(e.target.dataset.emotion === \"positive\");\r\n\r\n\r\n    let newButtonPhrases;\r\n    if (jokeStatus) {\r\n      newButtonPhrases = getRandomPhrases([USER_PHRASES.getJoke], 2);\r\n    } else {\r\n      newButtonPhrases = getRandomPhrases([\r\n        USER_PHRASES.positiveReply,\r\n        USER_PHRASES.negativeReply,\r\n      ]);\r\n    }\r\n    setTimeout(() => {\r\n      setButtonOneValue(newButtonPhrases[0]);\r\n      setButtonTwoValue(newButtonPhrases[1]);\r\n      getBotResponse();\r\n    }, 600);\r\n  };\r\n\r\n  const finishBot = () => {\r\n    changeJokeStatus();\r\n    setTimeout(() => {\r\n      toggleAllowClick();\r\n    }, 1500);\r\n  };\r\n\r\n  const getBotResponse = () => {\r\n    if (jokeStatus) {\r\n      // GET REPLY\r\n      console.log(\"userHappy\", userHappy);\r\n      const botReply = userHappy\r\n        ? getRandomPhrases([BOT_PHRASES.positiveReply])\r\n        : getRandomPhrases([BOT_PHRASES.negativeReply]);\r\n      sendMessage(\"bot\", botReply);\r\n\r\n      // ask next\r\n      setTimeout(() => {\r\n        sendMessage(\"bot\", getRandomPhrases([BOT_PHRASES.askForNextJoke]));\r\n      }, 1000);\r\n\r\n      finishBot();\r\n    } else {\r\n      // GET JOKE\r\n      const url =\r\n        \"https://v2.jokeapi.dev/joke/Any?blacklistFlags=nsfw,religious,political,racist,sexist,explicit\";\r\n      // ajax request\r\n      fetch(url, {\r\n        method: \"GET\",\r\n      })\r\n        .then((response) => {\r\n          response.json().then((data) => {\r\n            if (data.type === \"twopart\") {\r\n              // get setup\r\n              sendMessage(\"bot\", data.setup);\r\n              // get delivery\r\n              setTimeout(() => {\r\n                sendMessage(\"bot\", data.delivery);\r\n                finishBot();\r\n              }, 2500);\r\n            } else {\r\n              sendMessage(\"bot\", data.joke);\r\n              finishBot();\r\n            }\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`chat-box__form chat-new-message ${(!allowClick) ? classHideButtons:\"\"}`}>\r\n      <button\r\n        onClick={buttonClickHandler}\r\n        className=\"chat-new-message__button\"\r\n        data-emotion={jokeStatus ? \"positive\" : \"\"}\r\n      >\r\n        {buttonOneText}\r\n      </button>\r\n      <button\r\n        onClick={buttonClickHandler}\r\n        className=\"chat-new-message__button\"\r\n        data-emotion={jokeStatus ? \"negative\" : \"\"}\r\n      >\r\n        {buttonTwoText}\r\n      </button>\r\n      <p className=\"chat-new-message__loading-text\">Wait for reply...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatNewMessage;\r\n","import \"./ChatBox.css\";\r\nimport { useState } from \"react\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport ChatMessageList from \"./ChatMessageList\";\r\nimport ChatNewMessage from \"./ChatNewMessage\";\r\n\r\nconst DEFAULT_MESSAGES = [\r\n  {\r\n    id: \"1\",\r\n    author: \"bot\",\r\n    content: \"Hi! I'm the React Joke Bot. Ready to have a laugh?\",\r\n    time: new Date(),\r\n  },\r\n];\r\n\r\nconst ChatBox = (props) => {\r\n  const [messages, setMessages] = useState(DEFAULT_MESSAGES);\r\n\r\n  const clickHandler = () => {\r\n    if (!props.isChatExpanded) {\r\n      toggleVisibility();\r\n    }\r\n  };\r\n\r\n  const toggleVisibility = () => {\r\n    // call parent function to manage state\r\n    props.onToggleChatVisibility();\r\n  };\r\n\r\n  const addMessageHandler = (message) => {\r\n    setMessages((prevMessages) => {\r\n      return [...prevMessages, message];\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <div\r\n      className={`chat-box ${!props.isChatExpanded ? \"chat-box--collapsed\" : \"\"}`}\r\n      onClick={clickHandler}\r\n    >\r\n      <ChatHeader onMinimize={toggleVisibility} />\r\n      <ChatMessageList messages={messages} />\r\n      <ChatNewMessage onAddMessage={addMessageHandler} />\r\n      <i className=\"far fa-comment chat-box__trigger-icon\"></i>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n","import \"./ModalOverlay.css\";\r\n\r\nconst ModalOverlay = (props) => {\r\n  return (\r\n    <div\r\n      className={`modal-overlay ${props.classModalOverlay}`}\r\n      onClick={props.onClickOverlay}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default ModalOverlay;\r\n","import \"./App.css\";\r\nimport { useState } from \"react\";\r\nimport ChatBox from \"./components/ChatBox\";\r\nimport ModalOverlay from \"./components/ModalOverlay\";\r\n\r\nfunction App() {\r\n  const [isChatExpanded, setIsChatExpanded] = useState(false);\r\n\r\n  const toggleChatVisibility = () => {\r\n    setIsChatExpanded(!isChatExpanded);\r\n    const body = document.getElementsByTagName(\"body\")[0];\r\n    if (isChatExpanded) {\r\n      body.classList.remove(\"no-scroll\"); // allow scroll on body\r\n    } else {\r\n      body.classList.add(\"no-scroll\"); // prevent scroll on body\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <main className=\"App-main\">\r\n        <div className=\"container\">\r\n          <h1>React Joke Bot</h1>\r\n          <h3>\r\n            A project by <a href=\"http://rensvis.nl/\">Rens Vis</a>\r\n          </h3>\r\n          <p>\r\n            Welcome to the React Joke Bot. Press the button in the bottom right\r\n            of the page to have a laugh!\r\n          </p>\r\n        </div>\r\n        <div className=\"container card\">\r\n          <h2 className=\"card__title\">About this project</h2>\r\n          <h4>Description</h4>\r\n          <p>\r\n            The chat shows the user predefined phrases to choose from and the\r\n            bot answers in a conversational context.\r\n          </p>\r\n\r\n          <h4>Under the hood</h4>\r\n          <p>\r\n            This is (clearly) a <i className=\"fab fa-react react-logo\"></i>{\" \"}\r\n            <span className=\"bold\">React</span> project. The project consists of\r\n            the following different components:\r\n          </p>\r\n          <ul>\r\n            <li>ModalOverlay (dark background when the chatbox opens)</li>\r\n            <li>ChatBox (the actual chatbox)</li>\r\n            <li>ChatHeader (top section in the chatbox)</li>\r\n            <li>ChatMessageList (middle section in the chatbox)</li>\r\n            <li>ChatMessage (single messages)</li>\r\n            <li>ChatNewMessage (bottom section in the chatbox)</li>\r\n          </ul>\r\n\r\n          <p>\r\n            The jokes are pulled in via this <span className=\"bold\">api</span>:{\" \"}\r\n            <a href=\"https://jokeapi.dev/\">joke api</a>.\r\n          </p>\r\n\r\n          <p>\r\n            Check out the full <span className=\"bold\">sourcecode</span> on{\" \"}\r\n            <a href=\"https://github.com/rensvis/react-joke-bot\">\r\n              <i className=\"fab fa-github\"></i> GitHub\r\n            </a>\r\n            .\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"container footer\">\r\n          <p>\r\n            - 2021 <a href=\"http://rensvis.nl/\">Rens Vis</a> -\r\n          </p>\r\n        </div>\r\n      </main>\r\n      <ModalOverlay\r\n        classModalOverlay={isChatExpanded ? \"modal-overlay--is-visible\" : \"\"}\r\n        onClickOverlay={toggleChatVisibility}\r\n      />\r\n      <ChatBox\r\n        onToggleChatVisibility={toggleChatVisibility}\r\n        isChatExpanded={isChatExpanded}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}